from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from app.fsm.suggest import SuggestedTickets

from app.functions.suggest import send_tickets_to_admin

from app.keyboards.suggest import stop_kb, answer_kb, cannot_answer_kb, cancel_kb


router = Router()


@router.message(Command("suggest"))
async def cmd_suggest(msg: Message, state: FSMContext):
    await state.clear()
    await state.update_data(tickets=[])

    await msg.answer(
        "üíª <b>–û–∫–µ–π, –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –±–∏–ª–µ—Ç–æ–≤</b>.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ <u>—Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞</u>",
        reply_markup=cancel_kb,
    )

    await state.set_state(SuggestedTickets.ticket)


@router.message(SuggestedTickets.ticket, F.text == "‚õî –û—Ç–º–µ–Ω–∞")
async def cancel_proc(msg: Message, state: FSMContext):
    await msg.answer(
        "‚õî <b>–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω</b>",
        reply_markup=ReplyKeyboardRemove(),
    )

    await state.clear()


@router.message(SuggestedTickets.ticket, F.text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã")
async def process_stop(msg: Message, state: FSMContext):
    await msg.answer(
        "üìù <b>–í–≤–æ–¥ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</u>",
        reply_markup=cancel_kb,
    )
    await state.set_state(SuggestedTickets.subject)


@router.message(SuggestedTickets.ticket, F.text)
async def process_ticket(msg: Message, state: FSMContext):
    data = await state.get_data()
    tickets = data.get("tickets", [])

    tickets.append({"question": msg.text.strip(), "answer": None})

    await state.update_data(tickets=tickets)

    await msg.answer(
        f"üóí –ë–∏–ª–µ—Ç ‚Ññ{len(tickets)} <b>–ø—Ä–∏–Ω—è—Ç</b>. –¢–µ–∫—Å—Ç:\n<code>{msg.text.strip()}</code>\n\n–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å <b>–æ—Ç–≤–µ—Ç</b> –Ω–∞ —ç—Ç–æ—Ç –±–∏–ª–µ—Ç?",
        reply_markup=answer_kb,
    )

    await state.set_state(SuggestedTickets.answer_state)


@router.message(SuggestedTickets.answer_state, F.text == "‚úîÔ∏è –î–∞")
async def process_no_answer(msg: Message, state: FSMContext):
    await msg.answer(
        "‚úîÔ∏è –û—Ç–ª–∏—á–Ω–æ.\n–í–≤–µ–¥–∏—Ç–µ <u>–æ—Ç–≤–µ—Ç</u> –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –±–∏–ª–µ—Ç",
        reply_markup=cannot_answer_kb,
    )

    await state.set_state(SuggestedTickets.answer)


@router.message(SuggestedTickets.answer_state, F.text == "‚úñÔ∏è –ù–µ—Ç")
@router.message(SuggestedTickets.answer_state, F.text)
async def process_yes_answer(msg: Message, state: FSMContext):
    await msg.answer(
        '‚úñÔ∏è –•–æ—Ä–æ—à–æ.\n–í–≤–µ–¥–∏—Ç–µ <u>—Ç–µ–∫—Å—Ç</u> —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>"‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã"</b>',
        reply_markup=stop_kb,
    )

    await state.set_state(SuggestedTickets.ticket)


@router.message(SuggestedTickets.answer, F.text == "‚ùå –ù–µ –º–æ–≥—É –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç")
async def process_cannot_answer(msg: Message, state: FSMContext):
    await msg.answer(
        '‚ùå <b>–û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>.\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã"',
        reply_markup=stop_kb,
    )

    await state.set_state(SuggestedTickets.ticket)


@router.message(SuggestedTickets.answer, F.text)
async def process_answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    tickets = data.get("tickets", [])

    if tickets:
        tickets[-1]["answer"] = msg.text.strip()

        await state.update_data(tickets=tickets)

    await msg.answer(
        '‚úèÔ∏è <b>–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç</b>.\n–í–≤–µ–¥–∏—Ç–µ <u>—Ç–µ–∫—Å—Ç</u> —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∏–ª–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>"‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã"</b>',
        reply_markup=stop_kb,
    )

    await state.set_state(SuggestedTickets.ticket)


@router.message(SuggestedTickets.subject, F.text == "‚õî –û—Ç–º–µ–Ω–∞")
async def process_cancel_subject(msg: Message, state: FSMContext):
    await msg.answer(
        "‚õî <b>–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω</b>",
        reply_markup=ReplyKeyboardRemove(),
    )

    await state.clear()


@router.message(SuggestedTickets.subject, F.text)
async def process_subject(msg: Message, state: FSMContext):
    await state.update_data(subject=msg.text.strip())

    await msg.answer(
        "‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <u>–Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞</u> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1)",
        reply_markup=cancel_kb,
    )

    await state.set_state(SuggestedTickets.course)


@router.message(SuggestedTickets.course, F.text == "‚õî –û—Ç–º–µ–Ω–∞")
async def process_cancel_course(msg: Message, state: FSMContext):
    await msg.answer(
        "‚õî <b>–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω</b>",
        reply_markup=ReplyKeyboardRemove(),
    )

    await state.clear()


@router.message(SuggestedTickets.course, F.text.isdigit())
async def process_course(msg: Message, state: FSMContext):
    await state.update_data(course=msg.text.strip())

    data = await state.get_data()

    if await send_tickets_to_admin(msg, data):
        await msg.answer(
            "‚úÖ <b>–í—Å–µ –±–∏–ª–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –∏—Ö –∏ –∑–∞–≥—Ä—É–∑—è—Ç –≤ –±–∞–∑—É",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await msg.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–æ–≤</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=ReplyKeyboardRemove(),
        )

    await state.clear()


@router.message(SuggestedTickets.course)
async def process_course_invalid(message: Message):
    await message.answer(
        "‚ùå <b>–ù–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞.",
        reply_markup=cancel_kb,
    )
